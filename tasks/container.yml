---

- name: "{{ cname }} - Set container variable"
  set_fact:
    container: "{{ containers[cname] }}"
    msg_prefix: "| {{ cname }} @ {{ ansible_hostname|lower }} |"

- name: "{{ msg_prefix }} - Set defaults"
  set_fact:
    container: "{{ container|combine({ item.name: container[item.name] if container[item.name] is defined
      else item.default }) }}"
  with_items: "{{ container_default_vars }}"

# configuration
- name: "{{ msg_prefix }} - Create directory {{ container.basedir }}/{{ container.directory }}"
  file: path={{ container.basedir }}/{{ container.directory }} state=directory
  register: container_dir
  when: container.files is defined or container.templates is defined

- name: "{{ msg_prefix }} - Set path variables"
  set_fact:
    source_dir: '{{ "" if container.sourcedir == "" else container.sourcedir + "/" }}'

- name: "{{ msg_prefix }} - Copy files"
  copy:
    src: "{{ source_dir }}{{ container.directory }}/{{ container.files[fname].name }}"
    dest: "{{ container.basedir }}/{{ container.directory }}/{{ container.files[fname].name }}"
    owner: "{{ container.owner }}"
    group: "{{ container.group }}"
    mode: "{{ container.files[fname].mode }}"
  with_items: "{{ container.files }}"
  loop_control:
    loop_var: fname
  when: container.files is defined
  register: container_files

- name: "{{ msg_prefix }} - Copy templates"
  template:
    src: "{{ source_dir }}{{ container.directory }}/{{ container.templates[tname].name }}"
    dest: "{{ container.basedir }}/{{ container.directory }}/{{ container.templates[tname].name }}"
    owner: "{{ container.owner }}"
    group: "{{ container.group }}"
    mode: "{{ container.templates[tname].mode }}"
  with_items: "{{ container.templates }}"
  loop_control:
    loop_var: tname
  when: container.templates is defined
  register: container_templates

- name: "{{ msg_prefix }} - Configuration changed?"
  set_fact:
    container_config_changed: "{{ container_dir is changed or container_files is changed or
      container_templates is changed }}"
  changed_when: container_config_changed

- name: "{{ msg_prefix }} - Check for existing container"
  shell: docker ps -qa -f name={{ container.name }} --format '{{ '{{ ' }} .Status {{ ' }}' }}'
  register: container_exists_cmd
  changed_when: false
  when: container.create or container.restart or container.remove

- name: "{{ msg_prefix }} - Container exists?"
  set_fact:
    container_exists: "{{ true if container_exists_cmd.stdout_lines|length > 0 else false }}"
  when: container.create or container.restart or container.remove

# Pull
- name: "{{ msg_prefix }} - Pull image {{ container.image }}:{{ container.version }}"
  command: docker pull {{ container.image }}:{{ container.version }}
  register: container_pull
  when: container.pull
  changed_when: container_pull.stdout.find('Image is up to date') == -1

# Build [+ Push]
- name: "{{ msg_prefix }} - Build image"
  include_tasks: container_build.yml
  register: container_build
  when: container.build and
    (container_config_changed or
    (not container_exists and (container.create or container.restart)) or
    docker_deploy_forcebuild)

- name: "{{ msg_prefix }} - Image changed?"
  set_fact:
    container_image_changed: "{{ container_pull is changed or container_build is changed }}"

# Stop  [+ Remove]
- name: "{{ msg_prefix }} - Stop container"
  include_tasks: container_stop.yml
  when: (container.create or container.restart) and
    (container_image_changed or container_config_changed or docker_deploy_forcecreate or docker_deploy_forcerestart)

# Create [+ Start]
- name: "{{ msg_prefix }} - Create container"
  include_tasks: container_create.yml
  when: (container.create or container.restart) and
    (container_image_changed or container_config_changed or not container_exists or docker_deploy_forcecreate or
    docker_deploy_forcerestart)

- name: "{{ msg_prefix }} - Remove container (stop+remove)"
  include_tasks: container_stop.yml
  when: container.remove and not container.restart

# Cleanup
- name: "{{ msg_prefix }} - Cleanup images"
  include_tasks: container_cleanup.yml
  when: container.cleanup and container_image_changed

# Aliases
- name: "{{ msg_prefix }} - Setup aliases"
  include_tasks: container_alias.yml
  when: container.alias and
    (container_image_changed or container_config_changed or docker_deploy_forcecreate or docker_deploy_forcerestart)

# Purge
- name: "{{ msg_prefix }} - Purge target {{ container.basedir }}/{{ container.directory }}"
  file: path="{{ container.basedir }}/{{ container.directory }}" state=absent
  when: container.purge
